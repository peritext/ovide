/* eslint-disable */
const React = require('react');
const hydrate = require('react-dom').hydrate;
const peritextConfig = require('../../app/src/peritextConfig.render');
const config = require('config');

// Note: this module needs an html #mount element somewhere in the html in which
// it is invoked.
// todo: parametrize that as function parameter to be cleaner ?
const mountNode = document.getElementById('mount');

const templateId = "${templateId}";

/**
 * Handles the rendering of a peritext single page html
 * @param {object} production - the production to render
 */
const renderProduction = function (production, editionId, preprocessedData, locale, useBrowserRouter) {

  // console.log('render', production, editionId, locale, useBrowserRouter);
  // console.log('config', peritextConfig);

  const template = peritextConfig.templates.find(t => t.meta.id === templateId);
  if (!production) {
    // console.error('production is not loaded yet');
    return;
  }
  if (template) {
    const Production = template.components.Edition;
    const edition = production.editions[editionId];
    console.log('hydrating', mountNode)
    hydrate(React.createElement(Production, {
      production: production, 
      edition: edition, 
      locale: locale, 
      previewMode: false, 
      contextualizers: peritextConfig.contextualizers,
      usedDocument: document,
      useBrowserRouter: useBrowserRouter,
      preprocessedData: preprocessedData,
    }, null), mountNode, function(){
      console.log('done hydrating')
      setTimeout(() => {
        const staticContainer = document.getElementById('static')
        if (staticContainer) {
          staticContainer.remove();
        }
      })
      
    }); 
  } else {
    console.error('template %s not found', templateId);/* eslint no-console: 0 */
  }
}
window.renderEdition = renderProduction;

module.exports = renderProduction;